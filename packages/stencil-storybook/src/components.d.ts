/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { dropdownItems } from "./components/components/dropdown/dropdown";
export { dropdownItems } from "./components/components/dropdown/dropdown";
export namespace Components {
    interface ApAccordion {
        "ariaControls": string;
        "collapseIcon": string;
        "color": string;
        "expandIcon": string;
        "expanded"?: boolean;
        "iconPosition": string;
        "size": string;
        "triggerText": string;
    }
    interface ApAccordionItem {
        "ariaControls": string;
        "collapseIcon": string;
        "color": string;
        "expandIcon": string;
        "expanded"?: boolean;
        "iconPosition": string;
        "rightText"?: string;
        "size": string;
        "triggerText": string;
    }
    interface ApAlert {
        "close"?: boolean;
        "color"?: string;
        "icon": string;
        "size"?: string;
    }
    interface ApBadge {
        "color"?: string;
        "content": string;
        "icon"?: string;
        "iconOnly"?: boolean;
        "iconPosition"?: string;
        "outlined"?: boolean;
        "size"?: string;
        "text"?: boolean;
    }
    interface ApBreadcrumb {
        "color": string;
        "current": string;
        "size": string;
    }
    interface ApButton {
        "color"?: string;
        "content": string;
        "disabled"?: boolean;
        "icon"?: string;
        "iconOnly"?: boolean;
        "iconPosition"?: string;
        "outlined"?: boolean;
        "size"?: string;
        "text"?: boolean;
        "type"?: string;
    }
    interface ApCheckbox {
        "assistiveText"?: string;
        "border"?: boolean;
        "check": () => Promise<void>;
        "checked"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorText"?: string;
        "indeterminate"?: boolean;
        "inputId": string;
        "label"?: string;
        "required"?: boolean;
        "size": string;
        "unCheck": () => Promise<void>;
    }
    interface ApDropdown {
        "color"?: string;
        "data": dropdownItems[];
        "placeholder": string;
        "size"?: string;
    }
    interface ApErrorText {
        "color"?: string;
        "content": string;
        "size"?: string;
    }
    interface ApExpand {
        "ariaControls": string;
        "collapseIcon": string;
        "color": string;
        "expandIcon": string;
        "expanded"?: boolean;
        "iconPosition": string;
        "size": string;
        "triggerText": string;
    }
    interface ApFieldset {
        "color"?: string;
        "label": string;
        "required": boolean;
        "size": string;
    }
    interface ApGrid {
        "rowGap"?: string;
    }
    interface ApHeading {
        "color"?: string;
        "content": string;
        "size"?: string;
        "weight": number;
    }
    interface ApIcon {
        "color"?: string;
        "icon": string;
        "rounded"?: boolean;
        "size"?: string;
    }
    interface ApInput {
        "assistiveText"?: string;
        "color"?: string;
        "disabled": boolean;
        "error": boolean;
        "errorText"?: string;
        "inputId": string;
        "label": string;
        "leadingIcon"?: string;
        "name": string;
        "placeholder"?: string;
        "required": boolean;
        "size"?: string;
        "trailingIcon"?: string;
        "type": string;
        "value": string;
    }
    interface ApLabel {
        "assistiveText"?: string;
        "color"?: string;
        "content": string;
        "for": string;
        "required"?: boolean;
        "size"?: string;
        "tooltip"?: boolean;
    }
    interface ApLink {
        "color"?: string;
        "content": string;
        "icon"?: string;
        "iconPosition"?: string;
        "size"?: string;
    }
    interface ApModal {
        "closeModal": () => Promise<void>;
        "color": string;
        "direction": string;
        "openModal": () => Promise<void>;
        "opened": boolean;
        "size": string;
    }
    interface ApParagraph {
        "color"?: string;
        "content": string;
        "size"?: string;
        "weight": number;
    }
    interface ApRadio {
        "assistiveText"?: string;
        "border"?: boolean;
        "checked"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorText"?: string;
        "indeterminate"?: boolean;
        "inputId": string;
        "inputName": string;
        "label"?: string;
        "required"?: boolean;
        "size"?: string;
        "value"?: string;
    }
    interface ApSegmentedButtons {
        "color": string;
        "content": string;
        "icon": string;
        "size"?: string;
    }
    interface ApSplitButton {
        "color"?: string;
        "content": string;
        "icon"?: string;
        "size"?: string;
    }
    interface ApSpoiler {
        "expanded": boolean;
        "numberOfLines": string;
        "readLessText": string;
        "readMoreText": string;
    }
    interface ApSwitch {
        "assistiveText"?: string;
        "border"?: boolean;
        "checked"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorText"?: string;
        "indeterminate"?: boolean;
        "inputId": string;
        "label"?: string;
        "leadingIcon"?: string;
        "required"?: boolean;
        "size"?: string;
        "trailingIcon"?: string;
    }
    interface ApTabs {
        "color": string;
        "size": string;
        "type": string;
    }
    interface ApTooltip {
        "color"?: string;
        "content": string;
        "placement": string;
        "size"?: string;
    }
}
export interface ApAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApAccordionItemElement;
}
export interface ApBadgeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApBadgeElement;
}
export interface ApButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApButtonElement;
}
export interface ApCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApCheckboxElement;
}
export interface ApDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApDropdownElement;
}
export interface ApInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApInputElement;
}
export interface ApRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApRadioElement;
}
export interface ApSplitButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApSplitButtonElement;
}
export interface ApSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApSwitchElement;
}
declare global {
    interface HTMLApAccordionElement extends Components.ApAccordion, HTMLStencilElement {
    }
    var HTMLApAccordionElement: {
        prototype: HTMLApAccordionElement;
        new (): HTMLApAccordionElement;
    };
    interface HTMLApAccordionItemElementEventMap {
        "expandCollapse": any;
    }
    interface HTMLApAccordionItemElement extends Components.ApAccordionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApAccordionItemElementEventMap>(type: K, listener: (this: HTMLApAccordionItemElement, ev: ApAccordionItemCustomEvent<HTMLApAccordionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApAccordionItemElementEventMap>(type: K, listener: (this: HTMLApAccordionItemElement, ev: ApAccordionItemCustomEvent<HTMLApAccordionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApAccordionItemElement: {
        prototype: HTMLApAccordionItemElement;
        new (): HTMLApAccordionItemElement;
    };
    interface HTMLApAlertElement extends Components.ApAlert, HTMLStencilElement {
    }
    var HTMLApAlertElement: {
        prototype: HTMLApAlertElement;
        new (): HTMLApAlertElement;
    };
    interface HTMLApBadgeElementEventMap {
        "clickedBadge": any;
    }
    interface HTMLApBadgeElement extends Components.ApBadge, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApBadgeElementEventMap>(type: K, listener: (this: HTMLApBadgeElement, ev: ApBadgeCustomEvent<HTMLApBadgeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApBadgeElementEventMap>(type: K, listener: (this: HTMLApBadgeElement, ev: ApBadgeCustomEvent<HTMLApBadgeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApBadgeElement: {
        prototype: HTMLApBadgeElement;
        new (): HTMLApBadgeElement;
    };
    interface HTMLApBreadcrumbElement extends Components.ApBreadcrumb, HTMLStencilElement {
    }
    var HTMLApBreadcrumbElement: {
        prototype: HTMLApBreadcrumbElement;
        new (): HTMLApBreadcrumbElement;
    };
    interface HTMLApButtonElementEventMap {
        "clickedButton": any;
    }
    interface HTMLApButtonElement extends Components.ApButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApButtonElementEventMap>(type: K, listener: (this: HTMLApButtonElement, ev: ApButtonCustomEvent<HTMLApButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApButtonElementEventMap>(type: K, listener: (this: HTMLApButtonElement, ev: ApButtonCustomEvent<HTMLApButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApButtonElement: {
        prototype: HTMLApButtonElement;
        new (): HTMLApButtonElement;
    };
    interface HTMLApCheckboxElementEventMap {
        "clickedCheckbox": any;
    }
    interface HTMLApCheckboxElement extends Components.ApCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApCheckboxElementEventMap>(type: K, listener: (this: HTMLApCheckboxElement, ev: ApCheckboxCustomEvent<HTMLApCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApCheckboxElementEventMap>(type: K, listener: (this: HTMLApCheckboxElement, ev: ApCheckboxCustomEvent<HTMLApCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApCheckboxElement: {
        prototype: HTMLApCheckboxElement;
        new (): HTMLApCheckboxElement;
    };
    interface HTMLApDropdownElementEventMap {
        "clickDropdownItem": any;
    }
    interface HTMLApDropdownElement extends Components.ApDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApDropdownElementEventMap>(type: K, listener: (this: HTMLApDropdownElement, ev: ApDropdownCustomEvent<HTMLApDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApDropdownElementEventMap>(type: K, listener: (this: HTMLApDropdownElement, ev: ApDropdownCustomEvent<HTMLApDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApDropdownElement: {
        prototype: HTMLApDropdownElement;
        new (): HTMLApDropdownElement;
    };
    interface HTMLApErrorTextElement extends Components.ApErrorText, HTMLStencilElement {
    }
    var HTMLApErrorTextElement: {
        prototype: HTMLApErrorTextElement;
        new (): HTMLApErrorTextElement;
    };
    interface HTMLApExpandElement extends Components.ApExpand, HTMLStencilElement {
    }
    var HTMLApExpandElement: {
        prototype: HTMLApExpandElement;
        new (): HTMLApExpandElement;
    };
    interface HTMLApFieldsetElement extends Components.ApFieldset, HTMLStencilElement {
    }
    var HTMLApFieldsetElement: {
        prototype: HTMLApFieldsetElement;
        new (): HTMLApFieldsetElement;
    };
    interface HTMLApGridElement extends Components.ApGrid, HTMLStencilElement {
    }
    var HTMLApGridElement: {
        prototype: HTMLApGridElement;
        new (): HTMLApGridElement;
    };
    interface HTMLApHeadingElement extends Components.ApHeading, HTMLStencilElement {
    }
    var HTMLApHeadingElement: {
        prototype: HTMLApHeadingElement;
        new (): HTMLApHeadingElement;
    };
    interface HTMLApIconElement extends Components.ApIcon, HTMLStencilElement {
    }
    var HTMLApIconElement: {
        prototype: HTMLApIconElement;
        new (): HTMLApIconElement;
    };
    interface HTMLApInputElementEventMap {
        "inputTyping": any;
        "inputFilled": any;
    }
    interface HTMLApInputElement extends Components.ApInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApInputElementEventMap>(type: K, listener: (this: HTMLApInputElement, ev: ApInputCustomEvent<HTMLApInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApInputElementEventMap>(type: K, listener: (this: HTMLApInputElement, ev: ApInputCustomEvent<HTMLApInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApInputElement: {
        prototype: HTMLApInputElement;
        new (): HTMLApInputElement;
    };
    interface HTMLApLabelElement extends Components.ApLabel, HTMLStencilElement {
    }
    var HTMLApLabelElement: {
        prototype: HTMLApLabelElement;
        new (): HTMLApLabelElement;
    };
    interface HTMLApLinkElement extends Components.ApLink, HTMLStencilElement {
    }
    var HTMLApLinkElement: {
        prototype: HTMLApLinkElement;
        new (): HTMLApLinkElement;
    };
    interface HTMLApModalElement extends Components.ApModal, HTMLStencilElement {
    }
    var HTMLApModalElement: {
        prototype: HTMLApModalElement;
        new (): HTMLApModalElement;
    };
    interface HTMLApParagraphElement extends Components.ApParagraph, HTMLStencilElement {
    }
    var HTMLApParagraphElement: {
        prototype: HTMLApParagraphElement;
        new (): HTMLApParagraphElement;
    };
    interface HTMLApRadioElementEventMap {
        "clickedRadio": any;
    }
    interface HTMLApRadioElement extends Components.ApRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApRadioElementEventMap>(type: K, listener: (this: HTMLApRadioElement, ev: ApRadioCustomEvent<HTMLApRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApRadioElementEventMap>(type: K, listener: (this: HTMLApRadioElement, ev: ApRadioCustomEvent<HTMLApRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApRadioElement: {
        prototype: HTMLApRadioElement;
        new (): HTMLApRadioElement;
    };
    interface HTMLApSegmentedButtonsElement extends Components.ApSegmentedButtons, HTMLStencilElement {
    }
    var HTMLApSegmentedButtonsElement: {
        prototype: HTMLApSegmentedButtonsElement;
        new (): HTMLApSegmentedButtonsElement;
    };
    interface HTMLApSplitButtonElementEventMap {
        "clickedAction": any;
    }
    interface HTMLApSplitButtonElement extends Components.ApSplitButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApSplitButtonElementEventMap>(type: K, listener: (this: HTMLApSplitButtonElement, ev: ApSplitButtonCustomEvent<HTMLApSplitButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApSplitButtonElementEventMap>(type: K, listener: (this: HTMLApSplitButtonElement, ev: ApSplitButtonCustomEvent<HTMLApSplitButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApSplitButtonElement: {
        prototype: HTMLApSplitButtonElement;
        new (): HTMLApSplitButtonElement;
    };
    interface HTMLApSpoilerElement extends Components.ApSpoiler, HTMLStencilElement {
    }
    var HTMLApSpoilerElement: {
        prototype: HTMLApSpoilerElement;
        new (): HTMLApSpoilerElement;
    };
    interface HTMLApSwitchElementEventMap {
        "clickedRadio": any;
    }
    interface HTMLApSwitchElement extends Components.ApSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApSwitchElementEventMap>(type: K, listener: (this: HTMLApSwitchElement, ev: ApSwitchCustomEvent<HTMLApSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApSwitchElementEventMap>(type: K, listener: (this: HTMLApSwitchElement, ev: ApSwitchCustomEvent<HTMLApSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApSwitchElement: {
        prototype: HTMLApSwitchElement;
        new (): HTMLApSwitchElement;
    };
    interface HTMLApTabsElement extends Components.ApTabs, HTMLStencilElement {
    }
    var HTMLApTabsElement: {
        prototype: HTMLApTabsElement;
        new (): HTMLApTabsElement;
    };
    interface HTMLApTooltipElement extends Components.ApTooltip, HTMLStencilElement {
    }
    var HTMLApTooltipElement: {
        prototype: HTMLApTooltipElement;
        new (): HTMLApTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "ap-accordion": HTMLApAccordionElement;
        "ap-accordion-item": HTMLApAccordionItemElement;
        "ap-alert": HTMLApAlertElement;
        "ap-badge": HTMLApBadgeElement;
        "ap-breadcrumb": HTMLApBreadcrumbElement;
        "ap-button": HTMLApButtonElement;
        "ap-checkbox": HTMLApCheckboxElement;
        "ap-dropdown": HTMLApDropdownElement;
        "ap-error-text": HTMLApErrorTextElement;
        "ap-expand": HTMLApExpandElement;
        "ap-fieldset": HTMLApFieldsetElement;
        "ap-grid": HTMLApGridElement;
        "ap-heading": HTMLApHeadingElement;
        "ap-icon": HTMLApIconElement;
        "ap-input": HTMLApInputElement;
        "ap-label": HTMLApLabelElement;
        "ap-link": HTMLApLinkElement;
        "ap-modal": HTMLApModalElement;
        "ap-paragraph": HTMLApParagraphElement;
        "ap-radio": HTMLApRadioElement;
        "ap-segmented-buttons": HTMLApSegmentedButtonsElement;
        "ap-split-button": HTMLApSplitButtonElement;
        "ap-spoiler": HTMLApSpoilerElement;
        "ap-switch": HTMLApSwitchElement;
        "ap-tabs": HTMLApTabsElement;
        "ap-tooltip": HTMLApTooltipElement;
    }
}
declare namespace LocalJSX {
    interface ApAccordion {
        "ariaControls": string;
        "collapseIcon"?: string;
        "color"?: string;
        "expandIcon"?: string;
        "expanded"?: boolean;
        "iconPosition"?: string;
        "size"?: string;
        "triggerText": string;
    }
    interface ApAccordionItem {
        "ariaControls": string;
        "collapseIcon"?: string;
        "color"?: string;
        "expandIcon"?: string;
        "expanded"?: boolean;
        "iconPosition"?: string;
        "onExpandCollapse"?: (event: ApAccordionItemCustomEvent<any>) => void;
        "rightText"?: string;
        "size"?: string;
        "triggerText": string;
    }
    interface ApAlert {
        "close"?: boolean;
        "color"?: string;
        "icon"?: string;
        "size"?: string;
    }
    interface ApBadge {
        "color"?: string;
        "content"?: string;
        "icon"?: string;
        "iconOnly"?: boolean;
        "iconPosition"?: string;
        "onClickedBadge"?: (event: ApBadgeCustomEvent<any>) => void;
        "outlined"?: boolean;
        "size"?: string;
        "text"?: boolean;
    }
    interface ApBreadcrumb {
        "color"?: string;
        "current": string;
        "size"?: string;
    }
    interface ApButton {
        "color"?: string;
        "content"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "iconOnly"?: boolean;
        "iconPosition"?: string;
        "onClickedButton"?: (event: ApButtonCustomEvent<any>) => void;
        "outlined"?: boolean;
        "size"?: string;
        "text"?: boolean;
        "type"?: string;
    }
    interface ApCheckbox {
        "assistiveText"?: string;
        "border"?: boolean;
        "checked"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorText"?: string;
        "indeterminate"?: boolean;
        "inputId"?: string;
        "label"?: string;
        "onClickedCheckbox"?: (event: ApCheckboxCustomEvent<any>) => void;
        "required"?: boolean;
        "size"?: string;
    }
    interface ApDropdown {
        "color"?: string;
        "data"?: dropdownItems[];
        "onClickDropdownItem"?: (event: ApDropdownCustomEvent<any>) => void;
        "placeholder"?: string;
        "size"?: string;
    }
    interface ApErrorText {
        "color"?: string;
        "content"?: string;
        "size"?: string;
    }
    interface ApExpand {
        "ariaControls": string;
        "collapseIcon"?: string;
        "color"?: string;
        "expandIcon"?: string;
        "expanded"?: boolean;
        "iconPosition"?: string;
        "size"?: string;
        "triggerText": string;
    }
    interface ApFieldset {
        "color"?: string;
        "label"?: string;
        "required"?: boolean;
        "size"?: string;
    }
    interface ApGrid {
        "rowGap"?: string;
    }
    interface ApHeading {
        "color"?: string;
        "content"?: string;
        "size"?: string;
        "weight"?: number;
    }
    interface ApIcon {
        "color"?: string;
        "icon"?: string;
        "rounded"?: boolean;
        "size"?: string;
    }
    interface ApInput {
        "assistiveText"?: string;
        "color"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorText"?: string;
        "inputId"?: string;
        "label"?: string;
        "leadingIcon"?: string;
        "name"?: string;
        "onInputFilled"?: (event: ApInputCustomEvent<any>) => void;
        "onInputTyping"?: (event: ApInputCustomEvent<any>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "size"?: string;
        "trailingIcon"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface ApLabel {
        "assistiveText"?: string;
        "color"?: string;
        "content"?: string;
        "for"?: string;
        "required"?: boolean;
        "size"?: string;
        "tooltip"?: boolean;
    }
    interface ApLink {
        "color"?: string;
        "content"?: string;
        "icon"?: string;
        "iconPosition"?: string;
        "size"?: string;
    }
    interface ApModal {
        "color"?: string;
        "direction"?: string;
        "opened"?: boolean;
        "size"?: string;
    }
    interface ApParagraph {
        "color"?: string;
        "content"?: string;
        "size"?: string;
        "weight"?: number;
    }
    interface ApRadio {
        "assistiveText"?: string;
        "border"?: boolean;
        "checked"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorText"?: string;
        "indeterminate"?: boolean;
        "inputId"?: string;
        "inputName": string;
        "label"?: string;
        "onClickedRadio"?: (event: ApRadioCustomEvent<any>) => void;
        "required"?: boolean;
        "size"?: string;
        "value"?: string;
    }
    interface ApSegmentedButtons {
        "color"?: string;
        "content"?: string;
        "icon"?: string;
        "size"?: string;
    }
    interface ApSplitButton {
        "color"?: string;
        "content"?: string;
        "icon"?: string;
        "onClickedAction"?: (event: ApSplitButtonCustomEvent<any>) => void;
        "size"?: string;
    }
    interface ApSpoiler {
        "expanded"?: boolean;
        "numberOfLines"?: string;
        "readLessText"?: string;
        "readMoreText"?: string;
    }
    interface ApSwitch {
        "assistiveText"?: string;
        "border"?: boolean;
        "checked"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorText"?: string;
        "indeterminate"?: boolean;
        "inputId"?: string;
        "label"?: string;
        "leadingIcon"?: string;
        "onClickedRadio"?: (event: ApSwitchCustomEvent<any>) => void;
        "required"?: boolean;
        "size"?: string;
        "trailingIcon"?: string;
    }
    interface ApTabs {
        "color"?: string;
        "size"?: string;
        "type"?: string;
    }
    interface ApTooltip {
        "color"?: string;
        "content"?: string;
        "placement"?: string;
        "size"?: string;
    }
    interface IntrinsicElements {
        "ap-accordion": ApAccordion;
        "ap-accordion-item": ApAccordionItem;
        "ap-alert": ApAlert;
        "ap-badge": ApBadge;
        "ap-breadcrumb": ApBreadcrumb;
        "ap-button": ApButton;
        "ap-checkbox": ApCheckbox;
        "ap-dropdown": ApDropdown;
        "ap-error-text": ApErrorText;
        "ap-expand": ApExpand;
        "ap-fieldset": ApFieldset;
        "ap-grid": ApGrid;
        "ap-heading": ApHeading;
        "ap-icon": ApIcon;
        "ap-input": ApInput;
        "ap-label": ApLabel;
        "ap-link": ApLink;
        "ap-modal": ApModal;
        "ap-paragraph": ApParagraph;
        "ap-radio": ApRadio;
        "ap-segmented-buttons": ApSegmentedButtons;
        "ap-split-button": ApSplitButton;
        "ap-spoiler": ApSpoiler;
        "ap-switch": ApSwitch;
        "ap-tabs": ApTabs;
        "ap-tooltip": ApTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ap-accordion": LocalJSX.ApAccordion & JSXBase.HTMLAttributes<HTMLApAccordionElement>;
            "ap-accordion-item": LocalJSX.ApAccordionItem & JSXBase.HTMLAttributes<HTMLApAccordionItemElement>;
            "ap-alert": LocalJSX.ApAlert & JSXBase.HTMLAttributes<HTMLApAlertElement>;
            "ap-badge": LocalJSX.ApBadge & JSXBase.HTMLAttributes<HTMLApBadgeElement>;
            "ap-breadcrumb": LocalJSX.ApBreadcrumb & JSXBase.HTMLAttributes<HTMLApBreadcrumbElement>;
            "ap-button": LocalJSX.ApButton & JSXBase.HTMLAttributes<HTMLApButtonElement>;
            "ap-checkbox": LocalJSX.ApCheckbox & JSXBase.HTMLAttributes<HTMLApCheckboxElement>;
            "ap-dropdown": LocalJSX.ApDropdown & JSXBase.HTMLAttributes<HTMLApDropdownElement>;
            "ap-error-text": LocalJSX.ApErrorText & JSXBase.HTMLAttributes<HTMLApErrorTextElement>;
            "ap-expand": LocalJSX.ApExpand & JSXBase.HTMLAttributes<HTMLApExpandElement>;
            "ap-fieldset": LocalJSX.ApFieldset & JSXBase.HTMLAttributes<HTMLApFieldsetElement>;
            "ap-grid": LocalJSX.ApGrid & JSXBase.HTMLAttributes<HTMLApGridElement>;
            "ap-heading": LocalJSX.ApHeading & JSXBase.HTMLAttributes<HTMLApHeadingElement>;
            "ap-icon": LocalJSX.ApIcon & JSXBase.HTMLAttributes<HTMLApIconElement>;
            "ap-input": LocalJSX.ApInput & JSXBase.HTMLAttributes<HTMLApInputElement>;
            "ap-label": LocalJSX.ApLabel & JSXBase.HTMLAttributes<HTMLApLabelElement>;
            "ap-link": LocalJSX.ApLink & JSXBase.HTMLAttributes<HTMLApLinkElement>;
            "ap-modal": LocalJSX.ApModal & JSXBase.HTMLAttributes<HTMLApModalElement>;
            "ap-paragraph": LocalJSX.ApParagraph & JSXBase.HTMLAttributes<HTMLApParagraphElement>;
            "ap-radio": LocalJSX.ApRadio & JSXBase.HTMLAttributes<HTMLApRadioElement>;
            "ap-segmented-buttons": LocalJSX.ApSegmentedButtons & JSXBase.HTMLAttributes<HTMLApSegmentedButtonsElement>;
            "ap-split-button": LocalJSX.ApSplitButton & JSXBase.HTMLAttributes<HTMLApSplitButtonElement>;
            "ap-spoiler": LocalJSX.ApSpoiler & JSXBase.HTMLAttributes<HTMLApSpoilerElement>;
            "ap-switch": LocalJSX.ApSwitch & JSXBase.HTMLAttributes<HTMLApSwitchElement>;
            "ap-tabs": LocalJSX.ApTabs & JSXBase.HTMLAttributes<HTMLApTabsElement>;
            "ap-tooltip": LocalJSX.ApTooltip & JSXBase.HTMLAttributes<HTMLApTooltipElement>;
        }
    }
}
